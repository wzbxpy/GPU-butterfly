#include "graph.h"
#include "wtime.h"
#include <string>
#include <fstream>
#include <iostream>
#include <algorithm>
#include <vector>
#include <memory>
#include <sys/stat.h>
#include <sys/types.h>

using namespace std;
bool cmp1(int a, int b)
{
    return a > b;
}
struct Files
{
    fstream properties;
    fstream begin;
    fstream adj;
};

struct Props
{
    long long vertices;
    long long edges;
    Props()
    {
        vertices = 0;
        edges = 0;
    };
};

void graph::partitionAndStoreSrc(int num, string partitionedFolder)
{
    partitionNumSrc = num;
    Files *files = new Files[num];
    Props *props = new Props[num];
    for (int i = 0; i < partitionNumSrc; i++)
    {
        string prefix = partitionedFolder + to_string(partitionNumSrc) + "src" + to_string(i) + "/";
        mkdir(prefix.c_str(), S_IRWXU | S_IRWXG | S_IRWXO);
        files[i].properties.open(prefix + "properties.txt", ios::out);
        files[i].begin.open(prefix + "begin.bin", ios::out | ios::binary);
        files[i].adj.open(prefix + "adj.bin", ios::out | ios::binary);
    }
    for (int i = 0; i < uCount + vCount; i++)
    {
        int n = i % num;
        files[n].begin.write((char *)&props[n].edges, sizeof(long long));
        props[n].edges += beginPos[i + 1] - beginPos[i];
        props[n].vertices++;
        files[n].adj.write((char *)&edgeList[beginPos[i]], sizeof(int) * (beginPos[i + 1] - beginPos[i]));
    }

    for (int n = 0; n < num; n++)
    {
        files[n].begin.write((char *)&props[n].edges, sizeof(long long));
        files[n].properties << 0 << " " << props[n].vertices << " " << props[n].edges << endl;
        files[n].properties.close();
        files[n].begin.close();
        files[n].adj.close();
    }

    delete[] files;
    delete[] props;
}

void graph::partitionAndStoreDst(int num, string partitionedFolder)
{
    partitionNumDst = num;
    Files *files = new Files[num];
    Props *props = new Props[num];
    for (int i = 0; i < partitionNumDst; i++)
    {
        string prefix = partitionedFolder + to_string(partitionNumDst) + "dst" + to_string(i) + "/";
        mkdir(prefix.c_str(), S_IRWXU | S_IRWXG | S_IRWXO);
        files[i].properties.open(prefix + "properties.txt", ios::out);
        files[i].begin.open(prefix + "begin.bin", ios::out | ios::binary);
        files[i].adj.open(prefix + "adj.bin", ios::out | ios::binary);
    }
    vector<int> *a = new vector<int>[num];

    for (int i = 0; i < uCount + vCount; i++)
    {

        for (auto j = beginPos[i]; j < beginPos[i + 1]; j++)
        {
            int dstVertex = edgeList[j];
            int n = dstVertex % num;
            a[n].push_back(dstVertex);
        }
        for (int n = 0; n < num; n++)
        {
            files[n].begin.write((char *)&props[n].edges, sizeof(long long));
            props[n].edges += a[n].size();
            props[n].vertices++;
            files[n].adj.write((char *)&a[n][0], sizeof(int) * (a[n].size()));
            a[n].clear();
        }
    }

    for (int n = 0; n < num; n++)
    {
        files[n].begin.write((char *)&props[n].edges, sizeof(long long));
        files[n].properties << 0 << " " << props[n].vertices << " " << props[n].edges << endl;
        files[n].properties.close();
        files[n].begin.close();
        files[n].adj.close();
    }

    delete[] files;
    delete[] props;
    delete[] a;
}
void graph::partitionAndStore(int num, string path, bool isInMemory)
{
    loadGraph(path);
    // partitionAndStoreSrc(num, path + "partition");
    // partitionAndStoreDst(num, path + "partition");
    cout << "load graph ";
    getProcessMemory();

    if (isInMemory)
    {
        // In memory partition
        partitionGraphSrc(num);
        partitionGraphDst(num);
        storeGraph(path);
    }
    else
    {
        partitionAndStoreSrc(num, path + "partition");
        getProcessMemory();

        partitionAndStoreDst(num, path + "partition");
        getProcessMemory();
    }
    delete[] edgeList;
    delete[] beginPos;
    edgeList = nullptr;
    beginPos = nullptr;
}
